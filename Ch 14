#EX 1
#a
xs = [1,3,5,7,9,11,13,15,17,19]
ys = [1,2,3,4,5,6,7,8,9]

def merge(xs, ys):
    """ merge sorted lists xs and ys. Return a sorted result """
    result = []
    for i in xs:
        for j in ys:
            if i == j:
                result.append(i)
                break
    return(result)

print(merge(xs, ys))

#b
xs = [1,3,5,7,9,11,13,15,17,19]
ys = [1,2,3,4,5,6,7,8,9]

def merge(xs, ys):
    """ merge sorted lists xs and ys. Return a sorted result """
    result = []
    for i in xs:
        if i not in ys:
            result.append(i)
            
    return(result)

print(merge(xs, ys))

#c
xs = [1,3,5,7,9,11,13,15,17,19]
ys = [1,2,3,4,5,6,7,8,9]

def merge(xs, ys):
    """ merge sorted lists xs and ys. Return a sorted result """
    result = []
    for i in ys:
        if i not in xs:
            result.append(i)

    return(result)

print(merge(xs, ys))

#d
xs = [1,3,5,7,9,11,13,15,17,19]
ys = [1,2,3,4,5,6,7,8,9]

def merge(xs, ys):
    """ merge sorted lists xs and ys. Return a sorted result """
    result = []
    xi = 0
    yi = 0

    while True:
        if xi >= len(xs):          # If xs list is finished,
            result.extend(ys[yi:]) # Add remaining items from ys
            return result          # And we're done.

        if yi >= len(ys):          # Same again, but swap roles
            result.extend(xs[xi:])
            return result

        # Both lists still have items, copy smaller item to result.
        if xs[xi] <= ys[yi]:
            result.append(xs[xi])
            xi += 1
        else:
            result.append(ys[yi])
            yi += 1

print(merge(xs, ys))

#e

xs = [1,3,5,7,9,11,13,15,17,19]
ys = [1,2,3,4,5,6,7,8,9]

def merge(xs, ys):
    """ merge sorted lists xs and ys. Return a sorted result """
    result = []
    List1 = xs.copy()
    List2 = ys.copy()
    for i in List1:
        if i in List2:
            xs.remove(i)
            ys.remove(i)

    Final = xs
    return Final

print(merge(xs,ys))



#EX 2


def share_diagonal(x0, y0, x1, y1):
    """ Is (x0, y0) on a shared diagonal with (x1, y1)? """
    dy = abs(y1 - y0)        # Calc the absolute y distance
    dx = abs(x1 - x0)        # CXalc the absolute x distance
    return dx == dy          # They clash if dx == dy

def col_clashes(bs, c):
    """ Return True if the queen at column c clashes
         with any queen to its left.
    """
    for i in range(c):     # Look at all columns to the left of c
          if share_diagonal(i, bs[i], c, bs[c]):
              return True

    return False           # No clashes - col c has a safe placement.

def has_clashes(the_board):
    """ Determine whether we have any queens clashing on the diagonals.
        We're assuming here that the_board is a permutation of column
        numbers, so we're not explicitly checking row or column clashes.
    """
    for col in range(1,len(the_board)):
        if col_clashes(the_board, col):
            return True
    return False

def main():
    import random
    rng = random.Random()   # Instantiate a generator

    bd = list(range(8))     # Generate the initial permutation (change range number to board size)
    num_found = 0
    tries = 0
    while num_found < 10:
       rng.shuffle(bd)
       tries += 1
       if not has_clashes(bd):
           print("Found solution {0} in {1} tries.".format(bd, tries))
           tries = 0
           num_found += 1

main()


#EX 4
#a
def mirroriny(x):
    List = []
    for i in range(7,-1,-1):
        List.append(x[i])
    return List
    
 #b
 def mirrorinx(x):
    List = []
    for i in x:
        index = 7 - i
        List.append(index)
    return (List)
 
 #c
 def rotate90(x):
    List = [0,0,0,0,0,0,0,0]
    x_values = [0,1,2,3,4,5,6,7]
    y_values = x.copy()
    for i in range(0,8,1):
        currentx = x_values[i]
        currenty = y_values[i]
        newy = currentx
        newx = -(currenty) + 7
        List.remove(0)
        List.insert(newx,newy)
    return List
    
    def rotate180(x):
    w = rotate90(x)
    return (rotate90(w))

def rotate270(x):
    List = [0,0,0,0,0,0,0,0]
    x_values = [0,1,2,3,4,5,6,7]
    y_values = x.copy()
    for i in range(0,8,1):
        currentx = x_values[i]
        currenty = y_values[i]
        newy = -currentx + 7
        newx = currenty
        List.remove(0)
        List.insert(newx,newy)
    return List
    
    #d
    def symmetry(x):
    List = []
    List.append(x)
    List.append(rotate90(x))
    List.append(rotate180(x))
    List.append(rotate270(x))
    List.append(mirrorinx(x))
    List.append(mirroriny(x))
    w = rotate90(x)
    List.append(mirrorinx(w))
    List.append(mirroriny(w))


    return List

#EX 5
#a
import random

def lottodraw():
    List = []
    for i in range(6):
        List.append(random.randint(1,49))
    print(List)
    
lottodraw()
    
#b
def lottomatch(x,y):
    count=0
    for i in x:
        for g in y:
            if i==g:
                count+=1
    print(count)

lottomatch([42,4,7,11,1,13], [2,5,7,11,13,17])

#c




 
