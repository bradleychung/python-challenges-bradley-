#EX 1
print(list(range(10, 0, -2)))
result: [10, 8, 6, 4, 2]

#EX 2
import turtle

tess = turtle.Turtle()
alex = tess
alex.color("hotpink")

#this does not create a seperate turtle as alex and tess equal the same variable, therefore changing alex's colour also changes tess' colour

#EX 3
a = [1, 2, 3]
b = a[:]
b[0] = 5

#before the 3rd line of code, a = [1, 2, 3] and b = [1, 2, 3]
#after the 3rd line of code, a = [1, 2, 3] and b = [5, 2, 3]

#EX 4

this = ["I", "am", "not", "a", "crook"]
that = ["I", "am", "not", "a", "crook"]
print("Test 1: {0}".format(this is that))
that = this
print("Test 2: {0}".format(this is that))

#result: (test 1) - false (test 2) true
#this is because even though the values have the same values, the statement is not true until "that" is equated to "this" (that=this)


#EX 5

def add_vectors(u,v):
    vector=[]
    for i in range(len(u)):
        vector.append(u[i]+v[i])
    print(vector)
    
add_vectors([1, 2, 1], [1, 4, 3])


#EX 6

def scalar_mult(s,v):
    scalarvector=[]
    for i in range(len(v)):
        scalarvector.append(s*v[i])
    print(scalarvector)
    
scalar_mult(7, [3, 0, 5, 11, 2])



#EX 7

def dot_product(u,v):
    product=0
    for i in range(len(u)):
        product+=(u[i]*v[i])
    print(product)
    
dot_product([1, 2], [1, 4])


#EX 9

song = "The rain in Spain..."
print(" ".join(song.split()))

#The split command splits the string into a list of each word, however the join command just cancels that action by joining each word by " " (a space)


#EX 10

def replace(s, old, new):
    s = new.join(s.split(old))
    print(s)
    

s = "I love spom! Spom is my favorite food. Spom, spom, yum!"

replace(s, "om", "am")










